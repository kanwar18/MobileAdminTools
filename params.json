{"name":"Mobile Admin Tools","tagline":"Helping Salesforce Admins make quick work of the mundane.","body":"MobileAdminTools\r\n================\r\n\r\n## What is Mobile Admin Tools?\r\n\r\nI wanted to write an app that would help admins do their jobs more easily and efficiently, and a poll of 25 or so admins revealed that the top 2 real-world frustrations for Salesforce admins are password resets and user management. Mobile Admin Tools was created to help with those two pain points. \r\n\r\nFeatures you should note: \r\n\r\n   * The \"pull to refresh\" functionality builtin to all data viws \r\n\r\n   * The searchable user view with index on the side.  \r\n\r\n\r\nMost importantly, while viewing a particular user, admins can: \r\n\r\n\r\n   * Deactivate and / or (re)activate users, \r\n\r\n   * Initiate password reset, show email\r\n\r\n      * Just for fun, I added the option to tweet on password reset to share such inspirational tidbits as \"Just reset a user password from my phone.  MobileAdminTools ftw!  #MightBeAtTheBar\" \r\n      * This isn't intended to name & shame users for needing their password reset, but rather to socialize Mobile Admin Tools and bring a bit of levity to otherwise frustratingly boring work.\r\n\r\n   * View login history and other important user details such as role and profile, \r\n\r\n   * Manage user settings - all from their iPhones.  \r\n\r\n\r\n\r\nPlease note, this app utilizes the Salesforce native iOS SDK; however it is written in RubyMotion.\r\n\r\n## YouTube Video Demonstration\r\nYouTube Video - Mobile Admin Tools | http://www.youtube.com/watch?v=nqC7KaQwwgk\r\n\r\n## Known Issues and Limitations\r\nPlease see the issue tracker at: https://github.com/noeticpenguin/MobileAdminTools/issues for the current list of known issues\r\n\r\n## Rakefile Details\r\nAs those familiar with RubyMotion will no doubt recognize, the Rakefile is central to a Rm project's management.\r\nWhat follows is an annontated rakefile detailing whats needed to utilize the Salesforce Mobile Sdk iOS (1.x v) \r\nSDK within a RubyMotion project. \r\n\r\nA quick note: I have discovered a commonly held, but incorrect belief that RubyMotion projects are:\r\n* Slow\r\n* Not native applications\r\n* Unable to utilize the native SDK's and Frameworks\r\n* Unable to access / utilize open source cocoaTouch projects via CocoaPods.\r\n\r\nNone of the above are true, and this project demonstrates a *fast* (well, depending on your network connection)\r\n*native* iOS application that utilizes not only iOS frameworks like UIKit but also third party frameworks, and *cocoapoods*\r\n\r\n```ruby\r\n# -*- coding: utf-8 -*-\r\n$:.unshift(\"/Library/RubyMotion/lib\")\r\nrequire 'motion/project/template/ios'\r\nrequire 'rubygems'\r\nrequire 'bundler'\r\n\r\nBundler.require\r\nrequire 'sugarcube-repl'\r\n\r\nMotion::Project::App.setup do |app|\r\n  # Use `rake config' to see complete project settings.\r\n\t#### General Information\r\n\tapp.name = 'Mobile Admin Tools' # <-Set your project name here.\r\n\tapp.version = \"1.0\" # <- This is especially useful during TestFlight testing!\r\n\tapp.deployment_target = \"6.0\" # <- Minimum OS version for client device\r\n\tapp.device_family = [:iphone] # <- What devices can run this? other options include: :ipad\r\n\tapp.interface_orientations = [:portrait, :landscape_left, :landscape_right] # <- Hopefully obvious\r\n\t\r\n\t#### Application Artwork. \r\n\tapp.icons = [\"Icon.png\",    # <- iPhone non-retina standard icon\r\n\t\t    \"Icon@2x.png\"] # <- Retina iPhone icon\r\n\r\n\t#### Application Frameworks\r\n \t# This next line details the list of iOS frameworks that this application will require.\r\n  \t# While this list is specific to this application, it's pretty much the bare minimum needed\r\n  \t# for utilizing the Salesforce mobile SDK (iOS)\r\n\tapp.frameworks += %w(CFNetwork CoreData MobileCoreServices SystemConfiguration Security MessageUI QuartzCore OpenGLES CoreGraphics sqlite3)\r\n\t\r\n\t#### Code signature, profile and Identifier info. ##Headache##\r\n  \t# Note well the difference between development (simulator use) and relase (on device use)!\r\n\tapp.development do\r\n\t\tapp.entitlements['get-task-allow'] = true\r\n\t\t# app.identifier = '<<< INSERT YOUR APP IDENTIFIER HERE >>>'\r\n\t\t# app.provisioning_profile = '<<< INSERT FULL PATH TO YOUR PROVISIONING PROFILE HERE >>>'\r\n\t\t# app.codesign_certificate = '<<< INSERT NAME OF CODE SIGN CERTIFICATE HERE >>>'\r\n\tend\r\n\r\n\tapp.release do\r\n\t\tapp.entitlements['get-task-allow'] = false # <- THIS IS CRUCIAL\r\n  \t# app.identifier = '<<< INSERT YOUR APP IDENTIFIER HERE >>>'\r\n\t\t# app.provisioning_profile = '<<< INSERT FULL PATH TO YOUR PROVISIONING PROFILE HERE >>>'\r\n\t\t# app.codesign_certificate = '<<< INSERT NAME OF CODE SIGN CERTIFICATE HERE >>>'\r\n\tend\r\n\t\r\n\t#### Additional Libraries Needed\r\n\t# These are the minimum required libraries for use with the Salesforce mobile iOS SDK\r\n\tapp.libs << \"/usr/lib/libxml2.2.dylib\" # <- XML? ... yeah, we need it.\r\n\tapp.libs << \"/usr/lib/libsqlite3.0.dylib\" # <- Need to link against Sqlite 3\r\n\tapp.libs << \"/usr/lib/libz.dylib\" # <- Need to link against zlib\r\n\t# This rakefile assumes you're following the practice of placing a copy of the Salesforce\r\n\t# iOS sdk under <<ProjectRoot>>/vendor/Salesforce\r\n\tapp.libs << \"vendor/Salesforce/dist/openssl/openssl/libcrypto.a\" # <- Salesforce provided crypto lib\r\n\tapp.libs << \"vendor/Salesforce/dist/openssl/openssl/libssl.a\" # <- Salesforce provided SSL lib\r\n\tapp.libs << \"vendor/Salesforce/dist/sqlcipher/sqlcipher/libsqlcipher.a\" # <- Salesforce Provided Sqlite Encryption library\r\n\tapp.libs << \"vendor/Salesforce/dist/SalesforceCommonUtils/Libraries/libSalesforceCommonUtils.a\" # <- Salesforce provided, Non-open source library!\r\n\t\r\n\t#### Entitlements\r\n\t# In order for the application to securely store oAuth credentials, Salesforce apps need\r\n\t# the keychain-access-groups entitlement, this shouldn't change.\r\n\tapp.entitlements['keychain-access-groups'] = [\r\n\t\tapp.seed_id + '.' + app.identifier\r\n\t]\r\n\r\n\t#### Vendor Projects, because sometimes, precompiled code sucks.\r\n\t# While Salesforce provides precompiled versions of the following libraries under\r\n\t# /vendor/Salesforce/dist/<<Lib Name>> the following libraries *MUST* be compiled\r\n\t# so that rubymotion builds, and includes the bridgesupport file. This provides \r\n\t# Rubymotion with access to methods that are in Obj-c categories etc. \r\n\t\r\n\t# Restkit, because the pod isn't good enough.\r\n\t# YOU MUST USE THE SALESFORCE DISTRIBUTED VERSION\r\n\t# YOU MUST HAND COMPILE IT VIA VENDOR_PROJECT TO AVOID\r\n\t#   RANDOM SELECTOR_NOT_FOUND ERRORS. THAT IS ALL.\r\n\tapp.vendor_project \"vendor/Salesforce/external/RestKit/RestKit\", # <- path to root of library source\r\n\t\t:xcode, # <- either :xcode or :static, use :xcode if there is a .xcodeproj file present\r\n\t\t:target => 'RestKit', # <- if :xcode, specify the target you want to build\r\n\t\t:headers_dir => \"build/RestKit\" # <- *this is the crucial bit* RubyMotion builds the\r\n\t\t\t\t\t\t# .bridgesupport file from the headers, \r\n\t\t\t\t\t\t# YOU MUST SPECIFY THE HEADER DIR.\r\n\r\n\t# Salesforce SDK oAuth Library\r\n\t# YOU MUST HAND COMPILE FROM SOURCE TO AVOID A SELECTOR\r\n\t# \tNOT FOUND ERROR ON MACADDRESS. #JUSTSAYING.\r\n\tapp.vendor_project \"vendor/Salesforce/native/SalesforceOAuth\", \r\n\t\t:xcode, \r\n\t\t:target => 'SalesforceOAuth', \r\n\t\t:headers_dir => \"Headers/SalesforceOAuth\"\r\n\t\r\n\t#  Salesforce SDK Libraries\r\n\t#  Yeah so trying the precompile versions in vendor dist is just \r\n\t#  futile on stupid on #thisIsWhyDevsDrink. Even if you get it\r\n\t#  running, it'll bomb with weird ass errors.\r\n\tapp.vendor_project \"vendor/Salesforce/native/SalesforceSDK\", \r\n\t\t:xcode,\r\n\t\t:target => \"SalesforceSDK\",\r\n\t\t:headers_dir => \"SalesforceSDK/Classes\" # <- This is the most crucial .bridgesupport file\r\n\t\t\t\t\t\t\t# to be generated. \r\n\t\r\n\t#### CocoaPods!\r\n\t# Who doesn't love them some cocoaPod goodness?\r\n\tapp.pods do\r\n\t\t# pod 'RestKit' # <- Salesforce relies on THEIR FORK! DO NOT USE POD\r\n\t\tpod 'FlurrySDK' # <- Flury Mobile Analytics SDK, this is optional, but Mobile Data Tools uses it.\r\n\t\tpod 'Appirater' # <- Cocoa Pod for built in automatic prompting of \"rate my app please\", Options but Mobile Data Tools uses it.\r\n\t\tpod 'MGSplitViewController' # <- A more feature rich split view controller, here as an example\r\n\t\tpod 'MBProgressHUD' # <- For displaying pretty spinners with \"wait already!\" messages. Not in use in this app.\r\n\t\t# pod 'SQLCipher' # <- don't use this. #iWasTemptedToo. #fail.\r\n\t\t# pod 'FMDB' # <- Database wrapper not unlike active record. Not in use in this app\r\n\tend\r\n\r\n\t#TestFlight!\r\n\t# While test flight is normally included via a cocoapod, RubyMotion has it's own Gem. This sets it up.\r\n\t# This is optional, but highly recommended for on-device testing.\r\n\tapp.testflight.sdk = 'vendor/TestFlight'\r\n\tapp.testflight.api_token = '<<< TEST FLIGHT API TOKEN HERE >>>'\r\n\tapp.testflight.team_token = '<<< TEST FLIGHT TEAM TOKEN HERE >>>'\r\n\r\nend # <- End App.setup block. \r\n\r\n\r\n### Helper Rake Tasks\r\n# These Rake tasks are helper tasks designed to make development smoother / better / faster / stronger!\r\n# #6million$Dev\r\n\r\ndesc \"Open latest crash log\" # <- When the app crashes in the simulator it writes a .datXXXX file in the root \r\n\t\t\t\t# of the project containing the crash log. this opens the latest one.\r\ntask :log do\r\n\tapp = Motion::Project::App.config\r\n\texec \"less '#{Dir[File.join(ENV['HOME'], \"/Library/Logs/DiagnosticReports/#{app.name}*\")].last}'\"\r\nend\r\n\r\ndesc \"Run simulator in retina mode\" # <- default is non-retina mode\r\ntask :retina do\r\n\texec \"bundle exec rake simulator retina=true\"\r\nend\r\n\r\ndesc \"Run simulator on iPad\" # <- Run on an Ipad, if device family includes :ipad\r\ntask :ipad do\r\n\texec \"bundle exec rake simulator device_family=ipad\"\r\nend\r\n\r\n```\r\n\r\n## Additions / modifications to the SFRestAPI and SFRestAPI+Blocks classes\r\nThis app allows administrators to issue a password reset request for a given user. In order to do so, additional methods were added to the Salesforce provided SFRestAPI and SFRestAPI+Blocks classes. Details of those changes are here:\r\n\r\n```Obj-c\r\n// Found in: SFRestAPI.m\r\n// The Password management endpoint was added in api v24.0, so we must use at least that version.\r\n// SDK ships with a default of v23.0\r\nNSString* const kSFRestDefaultAPIVersion = @\"v24.0\";\r\n```\r\n\r\n```Obj-c\r\n// Found in: SFRestAPI.h\r\n/**\r\n * Returns a `SFRestRequest` which executes a user password reset.\r\n * @param uid a string containing the uuid of the user who's password should be reset.\r\n * @see http://www.salesforce.com/us/developer/docs/api_rest/Content/resources_sobject_user_password.htm\r\n */\r\n- (SFRestRequest *)requestForUserPasswordReset:(NSString *)uid;\r\n```\r\n\r\n```Obj-c\r\n// Found in: SFRestAPI.m\r\n- (SFRestRequest *)requestForUserPasswordReset:(NSString *)uid {\r\n    NSString *path = [NSString stringWithFormat:@\"/%@/sobjects/User/%@/password\", self.apiVersion, uid];\r\n    return [SFRestRequest requestWithMethod:SFRestMethodDELETE path:path queryParams:nil];\r\n}\r\n```\r\n\r\n###And for Blocks support\r\n```Obj-c\r\n// Found in: SFRestAPI+Blocks.h\r\n/**\r\n * Executes a request to reset a users password via REST API\r\n * @param failBlock the block to be exectured when the request fails (timeout, cancel, or error)\r\n * @param coompleteBlock the block to be executed when the request successfully completes\r\n * @return the newly sent SFRestRequest\r\n */\r\n- (SFRestRequest *) requestPasswordResetForUser:(NSString *)query \r\n                                      failBlock:(SFRestFailBlock)failBlock \r\n                                  completeBlock:(SFRestDictionaryResponseBlock)completeBlock;\r\n```\r\n\r\n```Obj-c\r\n// Found in: SFRestAPI+Blocks.m\r\n- (SFRestRequest *) requestPasswordResetForUser:(NSString *)uid failBlock:(SFRestFailBlock)failBlock completeBlock:(SFRestDictionaryResponseBlock)completeBlock {\r\n    SFRestRequest *request = [[SFRestAPI sharedInstance] requestForUserPasswordReset:uid];\r\n    [self sendRESTRequest:request\r\n                failBlock:failBlock\r\n            completeBlock:completeBlock];\r\n    \r\n    return request;\r\n}\r\n```\r\n","google":"UA-41587563-1","note":"Don't delete this file! It's used internally to help with page regeneration."}